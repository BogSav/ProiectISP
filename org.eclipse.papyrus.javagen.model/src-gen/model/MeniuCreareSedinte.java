// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package model;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Scanner;

public class MeniuCreareSedinte extends Meniu {
	public MeniuCreareSedinte() {
		super();
	}
	
	public void afisare() {
		if(!this.afisareOptiuni())
			return;
		
        Scanner kbd = new Scanner(System.in);
        
        System.out.println("Introdu titlu:");
        String titlu = kbd.nextLine();

        System.out.println("Introdu descriere:");
        String descriere = kbd.nextLine();

        System.out.println("Introdu data:");
        String data = kbd.nextLine();

        System.out.println("Introdu timp:");
        String timp = kbd.nextLine();

        System.out.println("Introdu manager:");
        String manager = kbd.nextLine();

        System.out.println("Introdu sala:");
        String sala = kbd.nextLine();
        
        Angajat[] angajati = new Angajat[10];
        int nrAngajati = 0;
        do {
        	System.out.println("Introduceti ID-ul unui angajat nou:");
        	int id = kbd.nextInt();
        	
        	Angajat a = super.getAngajatByID(id);
        	if(a != null) {
        		angajati[nrAngajati++] = a;
        	}else {
        		System.out.println("Angajatul nu exista");
        	}
        	
        	System.out.println("Daca vreti sa mai adaugati angajati apasati Y, daca nu apasati X");
        }while(!kbd.nextLine().equals("X"));

        Flags flags = creareSedinta(titlu, descriere, data, timp, manager, sala, angajati);
        
        if(flags.getValue() == 0) {
        	System.out.println("Sedinta a fost creata cu success");
        	super.urmatorulMeniu = TipuriMeniu.MeniuDefault;
            kbd.close();
        	return;
        }
        
        if(flags.has(Flags.TITLU_INCORECT)) {
            System.out.println("Titlul este incorect.");
        }

        if(flags.has(Flags.DESCRIERE_INCORECTA)) {
            System.out.println("Descrierea este incorectă.");
        }

        if(flags.has(Flags.DATA_NECOMPLETATA)) {
            System.out.println("Data nu este completată.");
        }

        if(flags.has(Flags.ZI_INCORECTA)) {
            System.out.println("Ziua este incorectă.");
        }

        if(flags.has(Flags.LUNA_INCORECTA)) {
            System.out.println("Luna este incorectă.");
        }

        if(flags.has(Flags.AN_INCORECT)) {
            System.out.println("Anul este incorect.");
        }

        if(flags.has(Flags.WEEKEND)) {
            System.out.println("Este weekend.");
        }

        if(flags.has(Flags.TIMP_NECOMPLETAT)) {
            System.out.println("Timpul nu este completat.");
        }

        if(flags.has(Flags.ORA_INCORECTA)) {
            System.out.println("Ora este incorectă.");
        }

        if(flags.has(Flags.MINUT_INCORECT)) {
            System.out.println("Minutul este incorect.");
        }

        if(flags.has(Flags.SALA_NECOMPLETATA)) {
            System.out.println("Sala nu este completată.");
        }

        if(flags.has(Flags.ANGAJATI_INSUFICIENTI)) {
            System.out.println("Numărul de angajați este insuficient.");
        }
        
        this.afisare();
	}

	private boolean afisareOptiuni() {
	    System.out.println("Alege o optiune:");
	    System.out.println("X - Intoarcere la meniul precedent");
	    System.out.println("Y - Creare sedinta");

	    Scanner kbd = new Scanner(System.in);
	    String optiune = kbd.nextLine().toUpperCase();

	    switch(optiune) {
	        case "Y":
	            return true;
	        case "X":
	            return false;
	        default:
	            System.out.println("Optiune invalida. Te rog sa introduci 'X' sau 'Y'.");
	            return afisareOptiuni();
	    }
	}
	
	public static boolean isWeekend(LocalDate date) {
		DayOfWeek dayOfWeek = date.getDayOfWeek();
		return (dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY);
	}
	
	public class Flags {
        public static final int TITLU_INCORECT = (1 << 0);
        public static final int DESCRIERE_INCORECTA = (1 << 1);
        
        public static final int DATA_NECOMPLETATA = (1 << 2);
        public static final int ZI_INCORECTA = (1 << 3);
        public static final int LUNA_INCORECTA = (1 << 4);
        public static final int AN_INCORECT = (1 << 5);
        public static final int WEEKEND = (1 << 6);
        
        public static final int TIMP_NECOMPLETAT = (1 << 7);
        public static final int ORA_INCORECTA = (1 << 8);
        public static final int MINUT_INCORECT = (1 << 9);
        
        public static final int SALA_NECOMPLETATA = (1 << 10);
        
        public static final int ANGAJATI_INSUFICIENTI = (1 << 11);

        private int value;

        Flags(int value) {
            this.value = value;
        }
        
        Flags(){
        	this.value = 0b00000000;
        }

        public int getValue() {
            return value;
        }

        public void add(int flag) {
           this.value |= flag;
        }

        public void remove(int flag) {
            this.value &= (~flag);
        }

        public boolean has(int flag) {
            return (this.value & flag) == flag;
        }
    }
	
	public Flags creareSedinta(String titlu, String descriere, String data, String timp, String manager, String sala) {
		return creareSedinta(titlu, descriere, data, timp, manager, sala, null);
	}
	
	public Flags creareSedinta(String titlu, String descriere, String data, String timp, String manager, String sala, Angajat[] angajati) {
		Flags flags = new Flags();
	
		// Verificari pentru titlu si descriere
		if(titlu == "" || titlu.length() < 5 || titlu.length() > 50) {
			flags.add(Flags.TITLU_INCORECT);
		}
		if(descriere == "" || descriere.length() < 5 || descriere.length() > 200) {
			flags.add(Flags.DESCRIERE_INCORECTA);
		}
		
		// Verificari pentru data, zi, luna si an
		if(data == "") {
			flags.add(Flags.DATA_NECOMPLETATA);
		}
		else {
			// Descompunere string data
			String zi_string = data.substring(0, 2);
			String luna_string = data.substring(3, 5);
			String an_string = data.substring(6, 10);
			
			// Obtinere valori data
			int zi = Integer.parseInt(zi_string);
			int luna = Integer.parseInt(luna_string);
			int an = Integer.parseInt(an_string);
			
			boolean dataOK = true;
			if(zi < 1 || zi > 31) {
				flags.add(Flags.ZI_INCORECTA);
				dataOK = false;
			}
			if(luna < 1 || luna > 12) {
				flags.add(Flags.LUNA_INCORECTA);
				dataOK = false;
			}
			if(an < 2023 || an > 2024) {
				flags.add(Flags.AN_INCORECT);
				dataOK = false;
			}
			
			if(dataOK == true) {
				LocalDate date = LocalDate.of(an,  luna, zi);
				if(isWeekend(date)) {
					flags.add(Flags.WEEKEND);
				}
			}
		}
		
		// Verificari pentru timp, minut si ora
		if(timp == "") {
			flags.add(Flags.TIMP_NECOMPLETAT);
		}
		else {
			// Descompunere string ora
			String ora_string = timp.substring(0, 2); // String ora -> primele 2 caractere 
			String minut_string = timp.substring(3, 5);
			
			// Obtinere valori ora
			int ora = Integer.parseInt(ora_string); // din string in int
			int minut = Integer.parseInt(minut_string);
			
			if (minut < 0 || minut > 59) {
				flags.add(Flags.MINUT_INCORECT);
			}
			if(ora < 9 || ora > 17) {
				flags.add(Flags.ORA_INCORECTA);
			}
		}
		
		// Verificare pentru sala
		if(sala == "") {
			flags.add(Flags.SALA_NECOMPLETATA);
		}
		
		// Verificam nr de angajati
		if(angajati == null) {
			flags.add(Flags.ANGAJATI_INSUFICIENTI);
		}
		else if (flags.value == 0) {
			Sedinta sedinta = new Sedinta(titlu, descriere, data, timp, manager, sala);
			
			for(Angajat a : angajati) {
				sedinta.adaugareAngajatSedinta(a);
			}
		}
		
		return flags;
	}
}
