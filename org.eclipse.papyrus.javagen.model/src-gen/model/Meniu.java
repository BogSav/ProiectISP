// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package model;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Scanner;

public class Meniu extends BazaDeDate {
	public int idAngajatLogat = -1;
	public TipuriMeniu urmatorulMeniu;
	
	public Meniu() {
		super();
	}
	
	public static boolean isWeekend(LocalDate date) {
		DayOfWeek dayOfWeek = date.getDayOfWeek();
		return (dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY);
	}
	
	public boolean validareSedinta(Sedinta s) {
		
		String zi_string = s.getData().substring(0, 2);
		String luna_string = s.getData().substring(3, 5);
		String an_string = s.getData().substring(6, 10);
		int zi = Integer.parseInt(zi_string);
		int luna = Integer.parseInt(luna_string);
		int an = Integer.parseInt(an_string);
		
		String ora_string = s.getOra().substring(0, 2); // String ora -> primele 2 caractere 
		String minut_string = s.getOra().substring(3, 5);
		int ora = Integer.parseInt(ora_string); // din string in int
		int minut = Integer.parseInt(minut_string);
		
		
		if(s.getTitlu() == "") {
			System.out.println("Titlu necompletat");
			return false;
		}
		if(s.getDescriere() == "") {
			System.out.println("Descriere necompletata");
			return false;
		}
		if(s.getData() == "") {
			System.out.println("Data necompletata");
			return false;
		}	
		if(s.getOra() == "") {
			System.out.println("Ora necompletata");
			return false;
		}	
		if(s.getSala() == "") {
			System.out.println("Sala necompletata");
			return false;
		}
		
		LocalDate date = LocalDate.of(an,  luna, zi);
		
		if(isWeekend(date)) {
			System.out.println("Ziua aleasa este in weekend");
			return false;
		}
		
		if( (ora < 9 || ora > 17) || (minut < 0 || minut > 59) ) {
			System.out.println("Ora invalida");
			return false;
		}
		
		return true;
	}
	
	// Verificam daca userul este logat sau nu, daca nu este il trimite direct la logare
	public void afisare() {
	    if (idAngajatLogat != -1) {
	        this.afisareOptiuni();
	        this.setUrmatorulMeniu();
	    } else {
	        System.out.println("Nu exista utilizator logat.");
	        System.out.println("Alegeti una dintre urmatoarele optiuni:");
	        System.out.println("1 - Mergi la meniul de logare");
	        System.out.println("2 - Inchide aplicatia");

	        Scanner scanner = new Scanner(System.in);
	        int optiune = scanner.nextInt();
	        if (optiune == 1) {
	            urmatorulMeniu = TipuriMeniu.MeniuLogare;
	        } else if (optiune == 2) {
	            System.out.println("Aplicatia se inchide...");
	            return;
	        } else {
	            System.out.println("Optiune invalida. Va rugam sa alegeti o optiune valida.");
	        }
	    }
	}
	
    // Afisam optiunile
    private void afisareOptiuni() {
        System.out.println("Alegeti unul dintre urmatoarele meniuri:");
        for (TipuriMeniu tip : TipuriMeniu.values()) {
            System.out.println(tip.ordinal() + ": " + tip);
        }
    }

    // Setam meniul urmator pe baza alegerii de la tastatura
    private void setUrmatorulMeniu() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Introduceti numarul corespunzator optiunii alese:");
        int optiune = scanner.nextInt();
        
        if (optiune >= 0 && optiune < TipuriMeniu.values().length) {
            urmatorulMeniu = TipuriMeniu.values()[optiune];
            System.out.println("Ati selectat: " + urmatorulMeniu);
        } else {
            System.out.println("Optiune invalida. Va rugam sa alegeti o optiune valida.");
        }
    }
    
    public TipuriMeniu getUrmatorulMeniu() {
    	return this.urmatorulMeniu;
    }
}
